{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.63.48766",
      "templateHash": "4484493057053435354"
    }
  },
  "parameters": {
    "appName": {
      "type": "string"
    },
    "region": {
      "type": "string"
    },
    "environment": {
      "type": "string"
    },
    "adminUsername": {
      "type": "string"
    },
    "publicSSHKey": {
      "type": "string"
    }
  },
  "functions": [],
  "variables": {
    "longName": "[format('{0}-{1}-{2}', parameters('appName'), parameters('region'), parameters('environment'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "keyVaultDeploy",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "longName": {
            "value": "[variables('longName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.63.48766",
              "templateHash": "17121592455673857"
            }
          },
          "parameters": {
            "longName": {
              "type": "string"
            }
          },
          "functions": [],
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2021-04-01-preview",
              "name": "[format('kv-{0}', parameters('longName'))]",
              "location": "[resourceGroup().location]",
              "properties": {
                "sku": {
                  "family": "A",
                  "name": "standard"
                },
                "tenantId": "[subscription().tenantId]",
                "enableRbacAuthorization": true
              }
            }
          ],
          "outputs": {
            "keyVaultName": {
              "type": "string",
              "value": "[format('kv-{0}', parameters('longName'))]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "serviceBusDeploy",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "longName": {
            "value": "[variables('longName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.63.48766",
              "templateHash": "16967208619431432921"
            }
          },
          "parameters": {
            "longName": {
              "type": "string"
            }
          },
          "functions": [],
          "resources": [
            {
              "type": "Microsoft.ServiceBus/namespaces",
              "apiVersion": "2021-01-01-preview",
              "name": "[format('sb-{0}', parameters('longName'))]",
              "location": "[resourceGroup().location]",
              "identity": {
                "type": "SystemAssigned"
              },
              "sku": {
                "name": "Standard",
                "tier": "Standard",
                "capacity": 1
              }
            },
            {
              "type": "Microsoft.ServiceBus/namespaces/topics",
              "apiVersion": "2017-04-01",
              "name": "[format('{0}/collectfine', format('sb-{0}', parameters('longName')))]",
              "dependsOn": [
                "[resourceId('Microsoft.ServiceBus/namespaces', format('sb-{0}', parameters('longName')))]"
              ]
            }
          ],
          "outputs": {
            "serviceBusName": {
              "type": "string",
              "value": "[format('sb-{0}', parameters('longName'))]"
            },
            "serviceBusEndpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ServiceBus/namespaces', format('sb-{0}', parameters('longName')))).serviceBusEndpoint]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "logicAppDeploy",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "longName": {
            "value": "[variables('longName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.63.48766",
              "templateHash": "8854222651906408229"
            }
          },
          "parameters": {
            "longName": {
              "type": "string"
            }
          },
          "functions": [],
          "resources": [
            {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2019-05-01",
              "name": "[format('logic-smtp-{0}', parameters('longName'))]",
              "location": "[resourceGroup().location]",
              "properties": {
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "actions": {
                    "Parse_JSON": {
                      "inputs": {
                        "content": "@triggerBody()",
                        "schema": {
                          "properties": {
                            "body": {
                              "type": "string"
                            },
                            "from": {
                              "type": "string"
                            },
                            "subject": {
                              "type": "string"
                            },
                            "to": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "runAfter": {},
                      "type": "ParseJson"
                    },
                    "Send_an_email_(V2)": {
                      "inputs": {
                        "body": {
                          "Body": "<p>@{body('Parse_JSON')?['body']}</p>",
                          "Subject": "@body('Parse_JSON')?['subject']",
                          "To": "@body('Parse_JSON')?['to']"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['office365']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/v2/Mail"
                      },
                      "runAfter": {
                        "Parse_JSON": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection"
                    }
                  },
                  "contentVersion": "1.0.0.0",
                  "outputs": {},
                  "parameters": {
                    "$connections": {
                      "defaultValue": {},
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "manual": {
                      "inputs": {},
                      "kind": "Http",
                      "type": "Request"
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "office365": {
                        "connectionId": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Web/connections/office365', subscription().subscriptionId, resourceGroup().name)]",
                        "connectionName": "office365",
                        "id": "[format('/subscriptions/{0}/providers/Microsoft.Web/locations/southcentralus/managedApis/office365', subscription().subscriptionId)]"
                      }
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "logicAppName": {
              "type": "string",
              "value": "[format('logic-smtp-{0}', parameters('longName'))]"
            },
            "logicAppAccessEndpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Logic/workflows', format('logic-smtp-{0}', parameters('longName')))).accessEndpoint]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "containerRegistryDeploy",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "longName": {
            "value": "[variables('longName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.63.48766",
              "templateHash": "10075930532235212056"
            }
          },
          "parameters": {
            "longName": {
              "type": "string"
            }
          },
          "functions": [],
          "resources": [
            {
              "type": "Microsoft.ContainerRegistry/registries",
              "apiVersion": "2020-11-01-preview",
              "name": "[replace(format('cr{0}', parameters('longName')), '-', '')]",
              "location": "[resourceGroup().location]",
              "sku": {
                "name": "Basic"
              }
            }
          ],
          "outputs": {
            "containerRegistryName": {
              "type": "string",
              "value": "[replace(format('cr{0}', parameters('longName')), '-', '')]"
            },
            "containerRegistryLoginServerName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', replace(format('cr{0}', parameters('longName')), '-', ''))).loginServer]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "aksDeploy",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "longName": {
            "value": "[variables('longName')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "publicSSHKey": {
            "value": "[parameters('publicSSHKey')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.63.48766",
              "templateHash": "6842867350319663861"
            }
          },
          "parameters": {
            "longName": {
              "type": "string"
            },
            "adminUsername": {
              "type": "string"
            },
            "publicSSHKey": {
              "type": "string"
            }
          },
          "functions": [],
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2020-10-01",
              "name": "[format('la-{0}', parameters('longName'))]",
              "location": "[resourceGroup().location]"
            },
            {
              "type": "Microsoft.ContainerService/managedClusters",
              "apiVersion": "2021-03-01",
              "name": "[format('aks-{0}', parameters('longName'))]",
              "location": "[resourceGroup().location]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "kubernetesVersion": "1.19.11",
                "dnsPrefix": "[parameters('longName')]",
                "enableRBAC": true,
                "agentPoolProfiles": [
                  {
                    "name": "agentpool",
                    "osDiskSizeGB": 0,
                    "count": 3,
                    "vmSize": "Standard_DS2_v2",
                    "osType": "Linux",
                    "mode": "System"
                  }
                ],
                "linuxProfile": {
                  "adminUsername": "[parameters('adminUsername')]",
                  "ssh": {
                    "publicKeys": [
                      {
                        "keyData": "[parameters('publicSSHKey')]"
                      }
                    ]
                  }
                },
                "addonProfiles": {
                  "httpApplicationRouting": {
                    "enabled": true
                  },
                  "omsagent": {
                    "enabled": true,
                    "config": {
                      "logAnalyticsWorkspaceResourceID": "[resourceId('Microsoft.OperationalInsights/workspaces', format('la-{0}', parameters('longName')))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', format('la-{0}', parameters('longName')))]"
              ]
            }
          ],
          "outputs": {
            "aksName": {
              "type": "string",
              "value": "[format('aks-{0}', parameters('longName'))]"
            },
            "aksfqdn": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ContainerService/managedClusters', format('aks-{0}', parameters('longName')))).fqdn]"
            },
            "aksazurePortalFQDN": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ContainerService/managedClusters', format('aks-{0}', parameters('longName')))).azurePortalFQDN]"
            },
            "logAnalyticsName": {
              "type": "string",
              "value": "[format('la-{0}', parameters('longName'))]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "redisCacheDeploy",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "longName": {
            "value": "[variables('longName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.63.48766",
              "templateHash": "6815544722431595698"
            }
          },
          "parameters": {
            "longName": {
              "type": "string"
            }
          },
          "functions": [],
          "resources": [
            {
              "type": "Microsoft.Cache/Redis",
              "apiVersion": "2019-07-01",
              "name": "[format('redis-{0}', parameters('longName'))]",
              "location": "[resourceGroup().location]",
              "properties": {
                "sku": {
                  "capacity": 1,
                  "family": "C",
                  "name": "Basic"
                },
                "minimumTlsVersion": "1.2"
              }
            }
          ],
          "outputs": {
            "redisCacheName": {
              "type": "string",
              "value": "[format('redis-{0}', parameters('longName'))]"
            },
            "redisCachePrimaryAccessKey": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Cache/Redis', format('redis-{0}', parameters('longName')))).accessKeys.primaryKey]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "mqttDeploy",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "longName": {
            "value": "[variables('longName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.63.48766",
              "templateHash": "7237256868605374906"
            }
          },
          "parameters": {
            "longName": {
              "type": "string"
            }
          },
          "functions": [],
          "variables": {
            "eventHubEntryCamName": "entrycam",
            "eventHubExitCamName": "exitcam",
            "eventHubNamespaceEndpointUri": "[format('sb://{0}.servicebus.windows.net', format('ehn-{0}-trafficcontrol', parameters('longName')))]"
          },
          "resources": [
            {
              "type": "Microsoft.EventHub/namespaces",
              "apiVersion": "2021-01-01-preview",
              "name": "[format('ehn-{0}-trafficcontrol', parameters('longName'))]",
              "location": "[resourceGroup().location]",
              "identity": {
                "type": "SystemAssigned"
              },
              "sku": {
                "name": "Basic",
                "tier": "Basic",
                "capacity": 1
              }
            },
            {
              "type": "Microsoft.EventHub/namespaces/eventhubs",
              "apiVersion": "2021-01-01-preview",
              "name": "[format('{0}/{1}', format('ehn-{0}-trafficcontrol', parameters('longName')), variables('eventHubEntryCamName'))]",
              "properties": {
                "partitionCount": 1,
                "messageRetentionInDays": 1
              },
              "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', format('ehn-{0}-trafficcontrol', parameters('longName')))]"
              ]
            },
            {
              "type": "Microsoft.EventHub/namespaces/eventhubs/authorizationRules",
              "apiVersion": "2021-01-01-preview",
              "name": "[format('{0}/listen', format('{0}/{1}', format('ehn-{0}-trafficcontrol', parameters('longName')), variables('eventHubEntryCamName')))]",
              "properties": {
                "rights": [
                  "Listen"
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces/eventhubs', split(format('{0}/{1}', format('ehn-{0}-trafficcontrol', parameters('longName')), variables('eventHubEntryCamName')), '/')[0], split(format('{0}/{1}', format('ehn-{0}-trafficcontrol', parameters('longName')), variables('eventHubEntryCamName')), '/')[1])]"
              ]
            },
            {
              "type": "Microsoft.EventHub/namespaces/eventhubs",
              "apiVersion": "2021-01-01-preview",
              "name": "[format('{0}/{1}', format('ehn-{0}-trafficcontrol', parameters('longName')), variables('eventHubExitCamName'))]",
              "properties": {
                "partitionCount": 1,
                "messageRetentionInDays": 1
              },
              "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', format('ehn-{0}-trafficcontrol', parameters('longName')))]"
              ]
            },
            {
              "type": "Microsoft.EventHub/namespaces/eventhubs/authorizationRules",
              "apiVersion": "2021-01-01-preview",
              "name": "[format('{0}/listen', format('{0}/{1}', format('ehn-{0}-trafficcontrol', parameters('longName')), variables('eventHubExitCamName')))]",
              "properties": {
                "rights": [
                  "Listen"
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces/eventhubs', split(format('{0}/{1}', format('ehn-{0}-trafficcontrol', parameters('longName')), variables('eventHubExitCamName')), '/')[0], split(format('{0}/{1}', format('ehn-{0}-trafficcontrol', parameters('longName')), variables('eventHubExitCamName')), '/')[1])]"
              ]
            },
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2018-11-30",
              "name": "[format('id-iotHub-{0}', parameters('longName'))]",
              "location": "[resourceGroup().location]"
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2018-01-01-preview",
              "scope": "[format('Microsoft.EventHub/namespaces/{0}/eventhubs/{1}', split(format('{0}/{1}', format('ehn-{0}-trafficcontrol', parameters('longName')), variables('eventHubEntryCamName')), '/')[0], split(format('{0}/{1}', format('ehn-{0}-trafficcontrol', parameters('longName')), variables('eventHubEntryCamName')), '/')[1])]",
              "name": "[guid(resourceGroup().id, format('id-iotHub-{0}', parameters('longName')), 'entrycam')]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-iotHub-{0}', parameters('longName')))).principalId]",
                "roleDefinitionId": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/2b629674-e913-4c01-ae53-ef4638d8f975', subscription().subscriptionId)]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces/eventhubs', split(format('{0}/{1}', format('ehn-{0}-trafficcontrol', parameters('longName')), variables('eventHubEntryCamName')), '/')[0], split(format('{0}/{1}', format('ehn-{0}-trafficcontrol', parameters('longName')), variables('eventHubEntryCamName')), '/')[1])]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-iotHub-{0}', parameters('longName')))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2018-01-01-preview",
              "scope": "[format('Microsoft.EventHub/namespaces/{0}/eventhubs/{1}', split(format('{0}/{1}', format('ehn-{0}-trafficcontrol', parameters('longName')), variables('eventHubExitCamName')), '/')[0], split(format('{0}/{1}', format('ehn-{0}-trafficcontrol', parameters('longName')), variables('eventHubExitCamName')), '/')[1])]",
              "name": "[guid(resourceGroup().id, format('id-iotHub-{0}', parameters('longName')), 'exitcam')]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-iotHub-{0}', parameters('longName')))).principalId]",
                "roleDefinitionId": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/2b629674-e913-4c01-ae53-ef4638d8f975', subscription().subscriptionId)]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces/eventhubs', split(format('{0}/{1}', format('ehn-{0}-trafficcontrol', parameters('longName')), variables('eventHubExitCamName')), '/')[0], split(format('{0}/{1}', format('ehn-{0}-trafficcontrol', parameters('longName')), variables('eventHubExitCamName')), '/')[1])]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-iotHub-{0}', parameters('longName')))]"
              ]
            },
            {
              "type": "Microsoft.Devices/IotHubs",
              "apiVersion": "2021-03-31",
              "name": "[format('iothub-{0}', parameters('longName'))]",
              "location": "[resourceGroup().location]",
              "sku": {
                "name": "B1",
                "capacity": 1
              },
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-iotHub-{0}', parameters('longName')))]": {}
                }
              },
              "properties": {
                "minTlsVersion": "1.2",
                "routing": {
                  "endpoints": {
                    "eventHubs": [
                      {
                        "name": "entrycam",
                        "authenticationType": "identityBased",
                        "identity": {
                          "userAssignedIdentity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-iotHub-{0}', parameters('longName')))]"
                        },
                        "endpointUri": "[variables('eventHubNamespaceEndpointUri')]",
                        "entityPath": "[variables('eventHubEntryCamName')]",
                        "subscriptionId": "[subscription().subscriptionId]",
                        "resourceGroup": "[resourceGroup().name]"
                      },
                      {
                        "name": "exitcam",
                        "authenticationType": "identityBased",
                        "identity": {
                          "userAssignedIdentity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-iotHub-{0}', parameters('longName')))]"
                        },
                        "endpointUri": "[variables('eventHubNamespaceEndpointUri')]",
                        "entityPath": "[variables('eventHubExitCamName')]",
                        "subscriptionId": "[subscription().subscriptionId]",
                        "resourceGroup": "[resourceGroup().name]"
                      }
                    ]
                  },
                  "routes": [
                    {
                      "name": "entrycam",
                      "source": "DeviceMessages",
                      "condition": "true",
                      "endpointNames": [
                        "[variables('eventHubEntryCamName')]"
                      ],
                      "isEnabled": true
                    },
                    {
                      "name": "exitcam",
                      "source": "DeviceMessages",
                      "condition": "true",
                      "endpointNames": [
                        "[variables('eventHubExitCamName')]"
                      ],
                      "isEnabled": true
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', format('ehn-{0}-trafficcontrol', parameters('longName')))]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-iotHub-{0}', parameters('longName')))]",
                "[extensionResourceId(resourceId('Microsoft.EventHub/namespaces/eventhubs', split(format('{0}/{1}', format('ehn-{0}-trafficcontrol', parameters('longName')), variables('eventHubEntryCamName')), '/')[0], split(format('{0}/{1}', format('ehn-{0}-trafficcontrol', parameters('longName')), variables('eventHubEntryCamName')), '/')[1]), 'Microsoft.Authorization/roleAssignments', guid(resourceGroup().id, format('id-iotHub-{0}', parameters('longName')), 'entrycam'))]",
                "[extensionResourceId(resourceId('Microsoft.EventHub/namespaces/eventhubs', split(format('{0}/{1}', format('ehn-{0}-trafficcontrol', parameters('longName')), variables('eventHubExitCamName')), '/')[0], split(format('{0}/{1}', format('ehn-{0}-trafficcontrol', parameters('longName')), variables('eventHubExitCamName')), '/')[1]), 'Microsoft.Authorization/roleAssignments', guid(resourceGroup().id, format('id-iotHub-{0}', parameters('longName')), 'exitcam'))]"
              ]
            }
          ],
          "outputs": {
            "iotHubName": {
              "type": "string",
              "value": "[format('iothub-{0}', parameters('longName'))]"
            },
            "eventHubNamespaceName": {
              "type": "string",
              "value": "[format('ehn-{0}-trafficcontrol', parameters('longName'))]"
            },
            "eventHubNamespaceHostName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.EventHub/namespaces', format('ehn-{0}-trafficcontrol', parameters('longName')))).serviceBusEndpoint]"
            },
            "eventHubNamespaceEndpointUri": {
              "type": "string",
              "value": "[variables('eventHubNamespaceEndpointUri')]"
            },
            "eventHubEntryCamName": {
              "type": "string",
              "value": "[format('{0}/{1}', format('ehn-{0}-trafficcontrol', parameters('longName')), variables('eventHubEntryCamName'))]"
            },
            "eventHubExitCamName": {
              "type": "string",
              "value": "[format('{0}/{1}', format('ehn-{0}-trafficcontrol', parameters('longName')), variables('eventHubExitCamName'))]"
            }
          }
        }
      }
    }
  ],
  "outputs": {
    "serviceBusName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'serviceBusDeploy'), '2019-10-01').outputs.serviceBusName.value]"
    },
    "serviceBusEndpoint": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'serviceBusDeploy'), '2019-10-01').outputs.serviceBusEndpoint.value]"
    },
    "redisCacheName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'redisCacheDeploy'), '2019-10-01').outputs.redisCacheName.value]"
    },
    "redisCachePrimaryAccessKey": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'redisCacheDeploy'), '2019-10-01').outputs.redisCachePrimaryAccessKey.value]"
    },
    "keyVaultName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'keyVaultDeploy'), '2019-10-01').outputs.keyVaultName.value]"
    },
    "logicAppName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'logicAppDeploy'), '2019-10-01').outputs.logicAppName.value]"
    },
    "logicAppAccessEndpoint": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'logicAppDeploy'), '2019-10-01').outputs.logicAppAccessEndpoint.value]"
    },
    "containerRegistryName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'containerRegistryDeploy'), '2019-10-01').outputs.containerRegistryName.value]"
    },
    "containerRegistryLoginServerName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'containerRegistryDeploy'), '2019-10-01').outputs.containerRegistryLoginServerName.value]"
    },
    "aksName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'aksDeploy'), '2019-10-01').outputs.aksName.value]"
    },
    "aksFQDN": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'aksDeploy'), '2019-10-01').outputs.aksfqdn.value]"
    },
    "aksazurePortalFQDN": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'aksDeploy'), '2019-10-01').outputs.aksazurePortalFQDN.value]"
    },
    "iotHubName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'mqttDeploy'), '2019-10-01').outputs.iotHubName.value]"
    },
    "eventHubNamespaceName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'mqttDeploy'), '2019-10-01').outputs.eventHubNamespaceName.value]"
    },
    "eventHubNamespaceHostName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'mqttDeploy'), '2019-10-01').outputs.eventHubNamespaceHostName.value]"
    },
    "eventHubEntryCamName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'mqttDeploy'), '2019-10-01').outputs.eventHubEntryCamName.value]"
    },
    "eventHubExitCamName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'mqttDeploy'), '2019-10-01').outputs.eventHubExitCamName.value]"
    }
  }
}