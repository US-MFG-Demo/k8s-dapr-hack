@page "/trafficcontrolservice"
@using Data
@using Microsoft.AspNetCore.SignalR.Client
@using System.Timers
@using System.Text.Json
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@implements IAsyncDisposable

<FluentButton @onclick="ToggleMonitoring" disabled="@(!IsConnected)">@MonitoringButtonText</FluentButton>

<hr>

<table style="width:100%">
  <thead>
    <tr>
      <th>Timestamp</th>
      <th>Message</th>
    </tr>
  </thead>
  <tbody>
    @foreach(var message in messages)
    {
      <tr>
        <td>@message.Timestamp</td>
        <td>@message.Message</td>
      </tr>
    }
  </tbody>
</table>
@code {
    private HubConnection hubConnection;
    private List<LogMessage> messages = new List<LogMessage>();
    private static Timer timer = new Timer(5000);
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/trafficcontrolhub"))
            .Build();

        hubConnection.On<string>("ReceiveMessage", (message) =>
        {
          messages.AddRange(JsonSerializer.Deserialize<List<LogMessage>>(message));

          StateHasChanged();
        });
      
        timer.Elapsed += ElapsedEventHandler;

        await hubConnection.StartAsync();
    }

    protected void ToggleMonitoring() {
      if(!timer.Enabled) {
      timer.Start();
      } else {
      timer.Stop();
      }
    }

    private async void ElapsedEventHandler(Object taskCompletionSource, ElapsedEventArgs e) 
    {
      await hubConnection.SendAsync("StartMonitoring", 5, "traffic-control-service");
    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }

        timer.Elapsed -= ElapsedEventHandler;
    }

    private string MonitoringButtonText
    {
      get 
      {
        if(!timer.Enabled) 
        {
          return "Start Monitoring";
        }
        else 
        {
          return "Stop Monitoring";
        }  
      }
    }
}