@using Data
@using Microsoft.AspNetCore.SignalR.Client
@using System.Timers
@using System.Text.Json
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<FluentButton @onclick="ToggleMonitoring" disabled="@(!IsConnected)">@MonitoringButtonText</FluentButton>
<hr>
<table style="width:100%">
  <thead>
    <tr>
      <th>Timestamp</th>
      <th>Message</th>
    </tr>
  </thead>
  <tbody>
    @foreach (var message in messages)
    {
      <tr>
        <td>@message.Timestamp</td>
        <td>@message.Message</td>
      </tr>
    }
  </tbody>
</table>

@code {
  private HubConnection hubConnection;
  private List<LogMessage> messages = new List<LogMessage>();
  private const int MAX_NUMBER_OF_MESSAGES = 100;
  private static Timer timer = new Timer();
  private const int REFRESH_INTERVAL_IN_SECONDS = 1;

  [Parameter]
  public string HubUrl { get; set; }

  [Parameter]
  public string ServiceName { get; set; }

  protected override async Task OnInitializedAsync()
  {
    hubConnection = new HubConnectionBuilder()
    .WithUrl(NavigationManager.ToAbsoluteUri(HubUrl))
    .Build();

    hubConnection.On<string>("ReceiveMessage", (message) =>
    {
      messages.AddRange(JsonSerializer.Deserialize<List<LogMessage>>(message));

      messages = messages.OrderByDescending(m => m.Timestamp).ToList();

      if (messages.Count > MAX_NUMBER_OF_MESSAGES)
      {
        messages.RemoveRange(MAX_NUMBER_OF_MESSAGES, messages.Count - MAX_NUMBER_OF_MESSAGES);
      }

      StateHasChanged();
    });

    timer.Interval = REFRESH_INTERVAL_IN_SECONDS * 1000;
    timer.Elapsed += ElapsedEventHandler;

    await hubConnection.StartAsync();
  }

  protected void ToggleMonitoring()
  {
    if (!timer.Enabled)
    {
      timer.Start();
    }
    else
    {
      timer.Stop();
    }
  }

  private async void ElapsedEventHandler(Object taskCompletionSource, ElapsedEventArgs e)
  {
    await hubConnection.SendAsync("StartMonitoring", 1, ServiceName);
  }

  public bool IsConnected =>
  hubConnection.State == HubConnectionState.Connected;

  public async ValueTask DisposeAsync()
  {
    if (hubConnection is not null)
    {
      await hubConnection.DisposeAsync();
    }

    timer.Elapsed -= ElapsedEventHandler;
  }

  private string MonitoringButtonText
  {
    get
    {
      if (!timer.Enabled)
      {
        return "Start Monitoring";
      }
      else
      {
        return "Stop Monitoring";
      }
    }
  }
}